def calculate_score(self, entity_id, transactions_df, wires_df, entity_df):
        """
        Calcule le score global basé sur les règles pour une entité et retourne les règles déclenchées.
        """
        score = 0
        triggered_rules = {}
        
        # Appliquer chaque règle, ajouter les scores et enregistrer les règles déclenchées
        rule_score = self.detect_large_wire_transfers_followed_by_outgoing(entity_id, transactions_df, wires_df)
        score += rule_score
        if rule_score > 0:
            triggered_rules["large_wire_transfers_followed_by_outgoing"] = rule_score

        rule_score = self.detect_sanctioned_countries_transactions(entity_id, transactions_df, wires_df)
        score += rule_score
        if rule_score > 0:
            triggered_rules["sanctioned_countries_transactions"] = rule_score

        rule_score = self.detect_split_cash_deposits_same_day(entity_id, transactions_df, wires_df)
        score += rule_score
        if rule_score > 0:
            triggered_rules["split_cash_deposits_same_day"] = rule_score

        rule_score = self.detect_suspected_money_mules(entity_id, transactions_df, wires_df, entity_df)
        score += rule_score
        if rule_score > 0:
            triggered_rules["suspected_money_mules"] = rule_score

        rule_score = self.detect_frequent_email_wire_transfers(entity_id, transactions_df, wires_df)
        score += rule_score
        if rule_score > 0:
            triggered_rules["frequent_email_wire_transfers"] = rule_score

        rule_score = self.detect_mixed_funds_between_accounts(entity_id, transactions_df, wires_df, entity_df)
        score += rule_score
        if rule_score > 0:
            triggered_rules["mixed_funds_between_accounts"] = rule_score

        rule_score = self.detect_high_volume_deposits(entity_id, transactions_df, wires_df, entity_df)
        score += rule_score
        if rule_score > 0:
            triggered_rules["high_volume_deposits"] = rule_score

        rule_score = self.detect_structured_deposits_below_threshold(entity_id, transactions_df, wires_df)
        score += rule_score
        if rule_score > 0:
            triggered_rules["structured_deposits_below_threshold"] = rule_score

        rule_score = self.detect_quick_withdrawals_after_deposits(entity_id, transactions_df, wires_df)
        score += rule_score
        if rule_score > 0:
            triggered_rules["quick_withdrawals_after_deposits"] = rule_score

        rule_score = self.detect_foreign_exchange_wires(entity_id, transactions_df, wires_df)
        score += rule_score
        if rule_score > 0:
            triggered_rules["foreign_exchange_wires"] = rule_score

        rule_score = self.detect_inconsistent_activity(entity_id, transactions_df, wires_df, entity_df)
        score += rule_score
        if rule_score > 0:
            triggered_rules["inconsistent_activity"] = rule_score
        
        # Appliquer le boost de drapeau suspect antérieur
        prior_flag_boost = self.apply_prior_suspicious_flag_boost(entity_id, entity_df)
        if prior_flag_boost > 0:
            score += prior_flag_boost
            triggered_rules["prior_suspicious_flag_boost"] = prior_flag_boost
        
        # Plafonner au score maximum
        normalized_score = min(score, self.max_score)
        return normalized_score, triggered_rules 